Promise : a promise a special js object that represent the eventual completion(or failure) of an asymchronous operation.

It allows to handle asynchronous tasks more efficiently than callbacks.

3 states :
1)pending : the initial state,the operation is still waiting for the operation to finish.
2)fulfilled : the operation completed successfully.
3)rejected : the operation failed.

Exp : 
	1) To create a promise - new Promise()
Two parameters - 
Resolve : to mark the promise as successful
Reject : to mark it as it is failed.

	2) Handling the result :
.then () method is called when the promise is fulfilled.
It will receive the result from resolve()
.catch() method is called if the promise is rejected it receives the error message from reject()

Example :

   let mypromise = new Promise((resolve,reject)=>{
    let success = true;
    if(success){
    resolve("The operation is successful");
    }else{
    reject("The operation is failed");
    }
    });
    mypromise
    .then(result=>{
        console.log(result);
    })
    .catch(error=>{
        console.log(error);
    });

o/p: true : the operation is successful
        false : the operation is failed

Chaining promises : 
Ex :  


 let promise = new Promise((resolve,reject)=>{
        resolve(5);
    })
    promise
    .then(result=>{
        console.log(result);
        return result*2
    })
    .then(result=>{
        console.log(result);
        return result+3
    })
    .then(result=>{
        console.log(result);
    })
    .catch(error=>{
        console.lpg("error",error)
    })

0/p:
5
10
13

Ex: promise with setTimEOut
--asynchronous task using setTimeOut , and the promise will resolve after certain period of time.



  let pro=new Promise((resolve,reject)=>{
        resolve(5);
    })
    pro.then(result=>{
        console.log(result)
        setTimeout((pro)=>{
            console.log("success")
        },3000)
    })

o/p: 5

vs code : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
    //     let mypromise = new Promise((resolve,reject)=>{
    // let success = true;
    // if(success){
    // resolve("The operation is successful");
    // }else{
    // reject("The operation is failed");
    // }
    // });
    // mypromise
    // .then(result=>{
    //     console.log(result);
    // })
    // .catch(error=>{
    //     console.log(error);
    // });


    //chaining promise

    // let promise = new Promise((resolve,reject)=>{
    //     resolve(5);
    // })
    // promise
    // .then(result=>{
    //     console.log(result);
    //     return result*2
    // })
    // .then(result=>{
    //     console.log(result);
    //     return result+3
    // })
    // .then(result=>{
    //     console.log(result);
    // })
    // .catch(error=>{
    //     console.lpg("error",error)
    // })

    //setTimeOut

    let pro=new Promise((resolve,reject)=>{
        resolve(5);
    })
    pro.then(result=>{
        console.log(result)
        setTimeout((pro)=>{
            console.log("success")
        },3000)
    })
 

    </script>
</body>
</html>
